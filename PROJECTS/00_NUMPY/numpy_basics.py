#BASIC UNDERSTANDING OF NUMPY
#Santiago Garcia Arango
#-------------------------------------------------------------------------
#NumPy is a linear algebra library for Python. It is used in many
#other libraries for the "data-ecosystem".
#It is created based on Low-level C programming, making it fast!

#For using NumPy, we have to install it first (with pip package installer)
#--------------------------------------------------------------------------

import numpy as np
import random

#-------------------------VECTORS FROM LISTS-------------------------------
#Create simple list with random numbers (we will make it an array after)
my_list = []
for i in range(5):
    my_list.append( random.randint(0,99) )

#Create array with numpy (from a list)
my_array_1 = np.array( my_list )
print( "my_array_1:\n", my_array_1, "\n")


#-----------------------MATRICES FROM LIST OF LISTS------------------------
#Create a list of lists (to create the matrix later)
my_list_of_lists = []
for i in range(5):
    my_list = []
    for j in range(5):
        my_list.append( random.randint(0,99) )
    my_list_of_lists.append( my_list )

#Create matrix with numpy (from a list of lists)
my_array_2 = np.array( my_list_of_lists )
print( "my_array_2:\n", my_array_2, "\n")



#----------------VECTORS AND MATRICES GENERATED BY NUMPY--------------------
#Generate a vector from "N" to "M" indicated in parameters
my_array_3 = np.arange(0, 10)
print( "my_array_3:\n", my_array_3, "\n")

#Generate a vector from "N" to "M" with step "X" indicated in parameters
my_array_4 = np.arange(0, 10, 2)
print( "my_array_4:\n", my_array_4, "\n")


#Generate a vector of zeros
my_array_5 = np.zeros( 7 )
print( "my_array_5:\n", my_array_5, "\n")

#Generate a matrix of zeros
#Remark: To generate a matrix, the dimensions must be indicated as a tuple
my_array_6 = np.zeros( (6, 3) )
print( "my_array_6:\n", my_array_6, "\n")

#Generate a vector of ones
my_array_7 = np.ones( 4 )
print( "my_array_7:\n", my_array_7, "\n")

#Generate a matrix of zeros
#Remark: To generate a matrix, the dimensions must be indicated as a tuple
my_array_8 = np.ones( (3, 7) )
print( "my_array_8:\n", my_array_8, "\n")


#Linear space (Return evenly spaced numbers over a specified interval.)
#linspace(X,Y,Z): X(start), Y(stop), Z(numbers of "separations" or "points")
my_array_9 = np.linspace(0, 10, 5)
print( "my_array_9:\n", my_array_9, "\n")


#Generate identity matrix
my_array_10 = np.eye( 5 )
print( "my_array_10:\n", my_array_10, "\n")




