#BASIC UNDERSTANDING OF NUMPY
#Santiago Garcia Arango
#-------------------------------------------------------------------------
#Most of these scripts are based on an online Udemy course.
#-------------------------------------------------------------------------
#NumPy is a linear algebra library for Python. It is used in many
#other libraries for the "data-ecosystem".
#It is created based on Low-level C programming, making it fast!

#For using NumPy, we have to install it first (with pip package installer)
#--------------------------------------------------------------------------

import numpy as np
import random


#----------------VECTORS AND MATRICES FROM LISTS----------------------------
#Create simple list with random numbers (we will make it an array after)
my_list = []
for i in range(5):
    my_list.append( random.randint(0,99) )

#Create array(in this case vector) with numpy (from a list)
my_array_1 = np.array( my_list )
print( "my_array_1 (vector from list)\n", my_array_1, "\n")


#Create a list of lists (to create the matrix later)
my_list_of_lists = []
for i in range(5):
    my_list = []
    for j in range(5):
        my_list.append( random.randint(0,99) )
    my_list_of_lists.append( my_list )

#Create array(in this case matrix) with numpy (from a list of lists)
my_array_2 = np.array( my_list_of_lists )
print( "my_array_2 (matrix from list o lists):\n", my_array_2, "\n")



#----------------VECTORS AND MATRICES GENERATED BY NUMPY--------------------
#Generate a vector from "N" to "M" indicated in parameters
my_array_3 = np.arange(0, 10)
print( "my_array_3 (vector from N to M):\n", my_array_3, "\n")

#Generate a vector from "N" to "M" with step "X" indicated in parameters
my_array_4 = np.arange(0, 10, 2)
print( "my_array_4(vector from N to M with space X):\n", my_array_4, "\n")


#Generate a vector of zeros
my_array_5 = np.zeros( 7 )
print( "my_array_5 (vector of zeros):\n", my_array_5, "\n")

#Generate a matrix of zeros
#Remark: To generate a matrix, the dimensions must be indicated as a tuple
my_array_6 = np.zeros( (6, 3) )
print( "my_array_6 (matrix of zeros):\n", my_array_6, "\n")

#Generate a vector of ones
my_array_7 = np.ones( 4 )
print( "my_array_7 (vector of ones):\n", my_array_7, "\n")

#Generate a matrix of zeros
#Remark: To generate a matrix, the dimensions must be indicated as a tuple
my_array_8 = np.ones( (3, 7) )
print( "my_array_8 (matrix of ones):\n", my_array_8, "\n")


#Linear space (Return evenly spaced numbers over a specified interval.)
#linspace(X,Y,Z): X(start), Y(stop), Z(numbers of "separations" or "points")
my_array_9 = np.linspace(0, 10, 5)
print( "my_array_9 (linspace from X to Y with N numbers):\n", my_array_9, "\n")


#Generate identity matrix
my_array_10 = np.eye(5)
print( "my_array_10 (Identity matrix):\n", my_array_10, "\n")


#Create vector of given shape with random numbers of uniform distribution(0,1)
my_array_11 = np.random.rand(5)
print( "my_array_11 (random vector uniform distribution(0,1)):\n", my_array_11, "\n")


#Create matrix of given shape with random numbers of UNIFORM distribution(0,1)
my_array_12 = np.random.rand( 5, 3)
print( "my_array_12 (random matrix UNIFORM distribution(0,1)):\n", my_array_12, "\n")


#Create matrix of give shape with random numbers of NORMAL distribution (Gauss Distrib.)
my_array_13 = np.random.randn( 5, 3)
print( "my_array_13 (random matrix NORMAL distribution(Gauss)):\n", my_array_13, "\n")


#Create matrix of given shape with random integers from X to Y number
my_array_14 = np.random.randint( 0, 99, (5, 5))
print( "my_array_13 (random matrix of integers from X to Y):\n", my_array_14, "\n")